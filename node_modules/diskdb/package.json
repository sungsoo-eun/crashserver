{
  "_args": [
    [
      {
        "raw": "diskdb",
        "scope": null,
        "escapedName": "diskdb",
        "name": "diskdb",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "F:\\Project\\crashserver"
    ]
  ],
  "_from": "diskdb@latest",
  "_id": "diskdb@0.1.17",
  "_inCache": true,
  "_location": "/diskdb",
  "_nodeVersion": "4.4.6",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/diskdb-0.1.17.tgz_1477493956175_0.15308092231862247"
  },
  "_npmUser": {
    "name": "arvindr21",
    "email": "arvind.ravulavaru@gmail.com"
  },
  "_npmVersion": "3.10.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "diskdb",
    "scope": null,
    "escapedName": "diskdb",
    "name": "diskdb",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/diskdb/-/diskdb-0.1.17.tgz",
  "_shasum": "8abd095196b33b406791f1494b6b13b4422240c4",
  "_shrinkwrap": null,
  "_spec": "diskdb",
  "_where": "F:\\Project\\crashserver",
  "author": {
    "name": "Arvind Ravulavaru",
    "email": "arvind.ravulavaru@gmail.com",
    "url": "http://thejackalofjavascript.com/"
  },
  "bugs": {
    "url": "https://github.com/arvindr21/diskdb/issues"
  },
  "dependencies": {
    "chalk": "^0.4.0",
    "merge": "^1.1.3",
    "node-uuid": "^1.4.1"
  },
  "description": "A Lightweight Disk based JSON Database with a MongoDB like API",
  "devDependencies": {
    "grunt": "^1.0.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-nodeunit": "^1.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "jshint-stylish": "^0.2.0",
    "load-grunt-tasks": "^0.4.0",
    "time-grunt": "^0.3.1"
  },
  "directories": {},
  "dist": {
    "shasum": "8abd095196b33b406791f1494b6b13b4422240c4",
    "tarball": "https://registry.npmjs.org/diskdb/-/diskdb-0.1.17.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "dd4a3ec7df52ae55c2247ba9e9892fdd1249a909",
  "homepage": "http://arvindr21.github.io/diskDB",
  "keywords": [
    "diskDB",
    "JSON",
    "Database",
    "file system",
    "CRUD",
    "lightweight"
  ],
  "license": "MIT",
  "main": "lib/diskdb.js",
  "maintainers": [
    {
      "name": "arvindr21",
      "email": "arvind.ravulavaru@gmail.com"
    }
  ],
  "name": "diskdb",
  "optionalDependencies": {},
  "readme": "# diskDB [![Build Status](https://secure.travis-ci.org/arvindr21/diskDB.png?branch=master)](https://travis-ci.org/arvindr21/diskDB) [![NPM version](https://badge-me.herokuapp.com/api/npm/diskdb.png)](http://badges.enytc.com/for/npm/diskdb) [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/arvindr21/diskDB?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm/diskdb.png?downloads=true&stars=true)](https://nodei.co/npm/diskdb/)\n\nA Lightweight Disk based JSON Database with a MongoDB like API for Node.\n\n_You will never know that you are interacting with a File System_\n\n## Contents\n\n* [Getting Started](#getting-started)\n* [Documentation](#documentation)\n  * [Connect](#connect-to-db)\n  * [Load Collections](#load-collections)\n  * [Write/Save](#writesave-to-collection)\n  * [Read](#read-from-collection)\n  * [Update](#update-collection)\n  * [Remove](#remove-collection)\n  * [Count](#count)\n* [Examples](#examples)\n* [Performance](#performance)\n* [Contributing](#contributing)\n* [Release History](#release-history)\n\n## Getting Started\nInstall the module locally :  \n```bash\n$ npm install diskdb\n```\n\n```js\nvar db = require('diskdb');\ndb = db.connect('/path/to/db-folder', ['collection-name']);\n// you can access the traditional JSON DB methods here\n```\n\n## Documentation\n### Connect to DB\n```js\ndb.connect(pathToFolder, ['filename']);\n```\nFilename will be the name of the JSON file. You can omit the extension, diskDB will take care of it for you.\n\n```js\nvar db = require('diskdb');\ndb = db.connect('/examples/db', ['articles']);\n// or simply\ndb.connect('/examples/db', ['articles']);\n```\n\nThis will check for a directory at given path, if it does not exits, diskDB will throw an error and exit.\n\nIf the directory exists but the file/collection does not exist, diskDB will create it for you.\n\n**Note** : If you have manually created an empty JSON file, please make sure that it contains at least an empty array.\n\n```js\n[]\n```\nElse it will throw an error like\n\n```bash\nundefined:0\n\n^\nSyntaxError: Unexpected end of input\n```\n---\n### Load Collections\nAlternatively you can also load collections like\n\n```js\nvar db = require('diskdb');\n// this\ndb = db.connect('/examples/db');\ndb.loadCollections(['articles']);\n//or\ndb.connect('/examples/db');\ndb.loadCollections(['articles']);\n//or\ndb.connect('/examples/db')\n  .loadCollections(['articles']);\n//or\ndb.connect('/examples/db', ['articles']);\n```\n#### Load Multiple Collections\n\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles','comments','users']);\n```\n---\n### Write/Save to Collection\n```js\ndb.collectionName.save(object);\n```\nOnce you have loaded a collection, you can access the collection's methods using the dot notation like\n\n```js\ndb.[collectionName].[methodname]\n```\nTo save the data, you can use\n```js\nvar db = require('diskdb');\ndb.connect('db', ['articles']);\nvar article = {\n    title : \"diskDB rocks\",\n    published : \"today\",\n    rating : \"5 stars\"\n}\ndb.articles.save(article);\n// or\ndb.articles.save([article]);\n```\nThe saved data will be\n```js\n[\n    {\n        \"title\": \"diskDB rocks\",\n        \"published\": \"today\",\n        \"rating\": \"5 stars\",\n        \"_id\": \"0f6047c6c69149f0be0c8f5943be91be\"\n    }\n]\n```\nYou can also save multiple objects at once like\n\n```js\nvar db = require('diskdb');\ndb.connect('db', ['articles']);\nvar article1 = {\n    title : 'diskDB rocks',\n    published : 'today',\n    rating : '5 stars'\n}\n\nvar article2 = {\n    title : 'diskDB rocks',\n    published : 'yesterday',\n    rating : '5 stars'\n}\n\nvar article3 = {\n    title : 'diskDB rocks',\n    published : 'today',\n    rating : '4 stars'\n}\ndb.articles.save([article1, article2, article3]);\n```\nAnd this will return the inserted objects\n\n```js\n[ { title: 'diskDB rocks',\n    published: 'today',\n    rating: '4 stars',\n    _id: 'b1cdbb3525b84e8c822fc78896d0ca7b' },\n  { title: 'diskDB rocks',\n    published: 'yesterday',\n    rating: '5 stars',\n    _id: '42997c62e1714e9f9d88bf3b87901f3b' },\n  { title: 'diskDB rocks',\n    published: 'today',\n    rating: '5 stars',\n    _id: '4ca1c1597ddc4020bc41b4418e7a568e' } ]\n```\n---\n### Read from Collection\nThere are 2 methods available for reading the JSON collection\n* db.collectionName.find(query)\n* db.collectionName.findOne(query)\n\n\n#### db.collectionName.find()\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.find();\n```\nThis will return all the records\n```js\n[{\n    title: 'diskDB rocks',\n    published: 'today',\n    rating: '5 stars',\n    _id: '0f6047c6c69149f0be0c8f5943be91be'\n}]\n```\nYou can also query with a criteria like\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.find({rating : \"5 stars\"});\n```\nThis will return all the articles which have a rating of 5.\n\nFind can take multiple criteria\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.find({rating : \"5 stars\", published: \"yesterday\"});\n```\nThis will return all the articles with a rating of 5, published yesterday.\n\nNested JSON :\n\n```js\nvar articleComments = {\n    title: 'diskDB rocks',\n    published: '2 days ago',\n    comments: [{\n        name: 'a user',\n        comment: 'this is cool',\n        rating: 2\n    }, {\n        name: 'b user',\n        comment: 'this is ratchet',\n        rating: 3\n    }, {\n        name: 'c user',\n        comment: 'this is awesome',\n        rating: 2\n    }]\n}\n```\n```js\nvar savedArticle = db.articles.save([articleComments);\nfoundArticles = db.articles.find({rating : 2});\n```\nSince diskDB is mostly for light weight data storage, avoid nested structures and huge datasets.\n\n#### db.collectionName.findOne(query)\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.findOne();\n```\n\nIf you do not pass a query, diskDB will return the first article in the collection. If you pass a query, it will return first article in the filtered data.\n\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.findOne({_id: '0f6047c6c69149f0be0c8f5943be91be'});\n```\n---\n### Update Collection\n```js\ndb.collectionName.update(query, data, options);\n```\n\nYou can also update one or many objects in the collection\n```js\noptions = {\n    multi: false, // update multiple - default false\n    upsert: false // if object is not found, add it (update-insert) - default false\n}\n```\nUsage\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\n\nvar query = {\n  title : 'diskDB rocks'\n};\n\nvar dataToBeUpdate = {\n  title : 'diskDB rocks again!',\n};\n\nvar options = {\n   multi: false,\n   upsert: false\n};\n\nvar updated = db.articles.update(query, dataToBeUpdate, options);\nconsole.log(updated); // { updated: 1, inserted: 0 }\n```\n---\n### Remove Collection\n```js\ndb.collectionName.remove(query, multi);\n```\nYou can remove the entire collection (including the file) or you can remove the matched objects by passing in a query. When you pass a query, you can either delete all the matched objects or only the first one by passing `multi` as `false`. The default value of `multi` is `true`.\n\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.remove({rating : \"5 stars\"});\n```\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.remove({rating : \"5 stars\"}, true); // remove all matched. Default - multi = true\n```\n\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.remove({rating : \"5 stars\"}, false); // remove only the first match\n```\nUsing remove without any params will delete the file and will remove the db instance.\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.remove();\n```\nAfter the above operation `db.articles` is `undefined`.\n\n---\n### Count\n```js\ndb.collectionName.count();\n```\nWill return the count of objects in the Collection\n```js\nvar db = require('diskdb');\ndb.connect('/examples/db', ['articles']);\ndb.articles.count(); // will give the count\n```\n\n## Examples\nRefer to the [examples](https://github.com/arvindr21/diskDB/tree/master/examples) folder.\n\n## Performance\nTo validate diskDB's performance and to check if it meets your needs, you can clone this repo and run\n\n```bash\n$ node performance/time.js\n```\nAn average of few tests (run on OS X - 10.9.3 | 2.9GHZ i7 | 8GB 1600MHz DDR3) can be found below\n\n#### Time taken to process x number of objects (in ms) vs Action Performed\n\n\\# of objects          | 1          | 1000       | 10000      | 100000     | 1000000\n-----------------------|------------|------------|------------|------------|-------------\nSave                   | 1 ms       | 15 ms      | 137 ms     | 1728 ms    | 14425 ms   \nFind all without query | 0 ms       | 2 ms       | 12 ms      | 204 ms     | 2923 ms    \nFind all with query    | 0 ms       | 2 ms       | 17 ms      | 738 ms     | 1985 ms    \nFind one without query | 0 ms       | 1 ms       | 9 ms       | 791 ms     | 1676 ms    \nFind one with query    | 0 ms       | 1 ms       | 8 ms       | 219 ms     | 1410 ms    \nUpdate all records     | 1 ms       | 7 ms       | 61 ms      | 206 ms     | 48035 ms   \nGet count              | 0 ms       | 3 ms       | 11 ms      | 260 ms     | 2420 ms    \nRemove with query      | 0 ms       | 7 ms       | 59 ms      | 984 ms     | 48191 ms   \nRemove collection      | 0 ms       | 1 ms       | 4 ms       | 52 ms      | 154 ms     \nFile size              | 0.000111 MB| 0.116671 MB| 1.196671 MB| 12.26667 MB| 125.66667 MB\n\n\n## Contributing\nSee the [CONTRIBUTING Guidelines](https://github.com/arvindr21/diskDB/blob/master/CONTRIBUTING.md)\n\n## Release History\n* 0.1.x\n  * Base Module with\n    * Connect to a Folder\n    * Access a Collection/File\n    * Create Read Update Delete on JSON object\n    * Minor fixes and tests\n    * Performance improvements\n\n## License\nCopyright (c) 2014 Arvind Ravulavaru. Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/arvindr21/diskdb.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "0.1.17"
}
